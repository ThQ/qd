<?xml version="1.0" encoding="utf-8" ?>

<namespace name="array" full-name="system.array" char="a">
   <include src="svm/Int.h" />
   <include src="svm/Array.h" />
   <include src="types.h" />

   <opcode name="new" char="_">
      <parameters count="2">
         <parameter index="0" type="svm::class_type" name="array_item_type" />
         <parameter index="1" type="svm::int_type" name="array_length" />
      </parameters>
      <body>
         svm::Object* arr = svm::Array::build(argv[0], argv[1]);
         this->current_block->heap.append(arr);
      </body>
      <stack after="new_array @svm::Array" />
   </opcode>

   <opcode name="get_item__ai" char="{">
      <parameters count="3">
         <parameter index="0" type="svm::array_type" name="base_array" />
         <parameter index="1" type="svm::int_type" name="item_index" />
      </parameters>
      <body>
         svm::Object* obj = ((svm::Array*)argv[0])->items[((svm::Int*)argv[1])->value];
         this->current_block->heap.append(obj);
      </body>
      <stack after="item_retrieved" />
   </opcode>

   <opcode name="set_item__ai" char="}">
      <parameters count="3">
         <parameter index="0" type="svm::array_type" name="base_array" />
         <parameter index="1" type="svm::int_type" name="item_index" />
         <parameter index="2" name="object" />
      </parameters>
      <body>
         // @TODO: Check for index out of range
         if (argv[3] != ((svm::Array*)argv[0])->type)
         {
            svm::Object* e = svm::Exception::build();
            e->set_class(svm::bad_type_exception_type);
            this->throw_exception(e);
         }
         else
         {
            ((svm::Array*)argv[0])->items[((svm::Int*)argv[1])->value] = argv[2];
         }
      </body>
      <stack />
   </opcode>

</namespace>

