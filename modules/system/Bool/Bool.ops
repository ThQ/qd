<?xml version="1.0" encoding="utf-8" ?>

<namespace name="b" char="b">
   <include src="vm/Bool.h" />

   <opcode name="and" char="A">
      <comment>
         <description>Boolean and on stack.</description>
         <appends>t::gTRUE if heap[0] and heap[1] are t::gTRUE.</appends>
      </comment>
      <parameters count="0" />
      <body><![CDATA[
         t::Object* b1 = heap.get(0);
         t::Object* b2 = heap.get(1);
         heap.replace(2, b1 == t::gTRUE && b2 == t::gTRUE ? t::gTRUE : t::gFALSE);
      ]]></body>
   </opcode>

   <opcode name="and_bb" char="&amp;">
      <comment>
         <description>Boolean and.</description>
         <appends>t::gTRUE if the two operands are t::gTRUE.</appends>
      </comment>
      <parameters count="2">
         <parameter index="0" type="t::tBOOL" />
         <parameter index="1" type="t::tBOOL" />
      </parameters>
      <body><![CDATA[
         heap.append(argv[0] == t::gTRUE && argv[1] == t::gTRUE ? t::gTRUE : t::gFALSE);
      ]]></body>
   </opcode>

   <opcode name="equals" char="E">
      <comment>
         <description>Boolean equality comparison on stack.</description>
         <appends>t::gTRUE if heap[0] and heap[1] are equal.</appends>
      </comment>
      <parameters count="0" />
      <body>
         t::Object* b1 = heap.get(0);
         t::Object* b2 = heap.get(1);
         heap.replace(2, b1 == b2 ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

   <opcode name="equals_bb" char="e">
      <comment>
         <description>Boolean equality comparison.</description>
         <appends>t::gTRUE if args[0] and args[1] are equal.</appends>
      </comment>
      <parameters count="2">
         <parameter index="0" type="t::tBOOL" />
         <parameter index="1" type="t::tBOOL" />
      </parameters>
      <body>
         heap.append(argv[0] == argv[1] ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

   <opcode name="not" char="N">
      <comment>
         <description>Boolean not on stack.</description>
         <appends>t::gTRUE if heap[0] is t::gFALSE.</appends>
      </comment>
      <parameters count="0" />
      <body>
         heap.replace(1, heap.get(0) == t::gTRUE ? t::gFALSE : t::gTRUE);
      </body>
   </opcode>

   <opcode name="not_b" char="!">
      <comment>
         <description>Boolean not</description>
         <appends>t::gTRUE if args[0] is t::gFALSE.</appends>
      </comment>
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         heap.append(argv[0] == t::gTRUE ? t::gFALSE : t::gTRUE);
      </body>
   </opcode>

   <opcode name="or" char="0">
      <comment>
         <description>Boolean or on stack</description>
         <appends>t::gTRUE if heap(0) or heap(1) is t::gTRUE.</appends>
      </comment>
      <parameters count="0" />
      <body>
         t::Object* b1 = heap.get(0);
         t::Object* b2 = heap.get(1);
         heap.replace(2, b1 == t::gTRUE || b2 == t::gTRUE ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

   <opcode name="or_bb" char="|">
      <comment>
         <description>Boolean or</description>
         <appends>t::gTRUE if arg1 or arg2 is t::gTRUE.</appends>
      </comment>
      <parameters count="2">
         <parameter index="0" type="t::tBOOL" />
         <parameter index="1" type="t::tBOOL" />
      </parameters>
      <body>
         heap.append(argv[0] == t::gTRUE || argv[1] == t::gTRUE ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

   <opcode name="print" char="q">
      <parameters count="0" />
      <body>
         t::Bool::print(heap.get(0));
      </body>
   </opcode>

   <opcode name="print_b" char="p">
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         t::Bool::print(argv[0]);
      </body>
   </opcode>

   <opcode name="print_line" char="Q">
      <parameters count="0" />
      <body>
         t::Bool::print_line(heap.get(0));
      </body>
   </opcode>

   <opcode name="print_line_b" char="P">
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         t::Bool::print_line(argv[0]);
      </body>
   </opcode>

   <opcode name="push_false" char="F">
      <comment>
         <description>Push t::gFALSE onto the stack.</description>
         <appends>t::gFALSE</appends>
      </comment>
      <parameters count="0" />
      <body>
         heap.append(t::gFALSE);
      </body>
   </opcode>

   <opcode name="push_true" char="T">
      <comment>
         <description>Push t::gTRUE onto the stack.</description>
         <appends>t::gTRUE</appends>
      </comment>
      <parameters count="0" />
      <body>
         heap.append(t::gTRUE);
      </body>
   </opcode>

   <opcode name="vand" char="a">
      <comment>
         <description>Variable boolean and.</description>
         <appends>t::gTRUE if all operands are t::gTRUE</appends>
      </comment>
      <parameters minimum-count="1" />
      <body><![CDATA[
         bool is_true = true;
         for (ULong j = 0 ; i < opc->argc ; ++j)
         {
            if (argv[j] == t::gFALSE)
            {
               is_true = false;
            }
         }

         heap.append(is_true ? t::gTRUE : t::gFALSE);
         heap.append(t::gFALSE);
      ]]></body>
   </opcode>

   <opcode name="vor" char="o">
      <comment>
         <description>Variable boolean or.</description>
         <returns>t::gTRUE if at least one operand is t::gTRUE</returns>
      </comment>
      <parameters minimum-count="1" />
      <body><![CDATA[
         bool is_true = false;
         for (ULong j = 0 ; j < opc->argc ; ++j)
         {
            if (argv[j] == t::gTRUE)
            {
               is_true = true;
               break;
            }
         }
         heap.append(is_true ? t::gTRUE : t::gFALSE);
      ]]></body>
   </opcode>

   <opcode name="xor" char="X">
      <comment>
         <description>Boolean xor on stack.</description>
         <appends>t::gTRUE if heap[0] and heap[1] are different.</appends>
      </comment>
      <parameters count="0" />
      <body>
         heap.append(heap.get(0) != heap.get(1) ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

   <opcode name="xor_bb" char="x">
      <comment>
         <description>Boolean xor.</description>
         <appends>t::gTRUE if argv[0] and argv[1] are different.</appends>
      </comment>
      <parameters count="2">
         <parameter index="0" type="t::tBOOL" />
         <parameter index="1" type="t::tBOOL" />
      </parameters>
      <body>
         heap.append(argv[0] != argv[1] ? t::gTRUE : t::gFALSE);
      </body>
   </opcode>

</namespace>

