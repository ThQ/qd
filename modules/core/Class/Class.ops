<?xml version="1.0" encoding="utf-8" ?>

<namespace name="class" char="c">
   <include src="t/Class.h" />
   <include src="t/String.h" />

   <opcode name="new__ss" char="+">
      <parameters minimum-count="2">
         <parameter index="0" type="t::tSTRING" comment="Class name" />
         <parameter index="1" type="t::tSTRING" comment="Parent class name" />
      </parameters>
      <body>
         t::String* class_name = (t::String*)argv[0];
         t::String* parent_class_name = (t::String*)argv[1];
         this->classes.declare_class(class_name->value.c_str(), ((std::string)parent_class_name->value).c_str());
      </body>
   </opcode>

   <opcode name="new_method__ssss" char="m">
      <parameters count="4">
         <parameter index="0" type="t::tSTRING" comment="Class name" />
         <parameter index="1" type="t::tSTRING" comment="Method name" />
         <parameter index="2" type="t::tSTRING" comment="Return type name" />
         <parameter index="3" type="t::tSTRING" comment="Block name" />
      </parameters>
      <body><![CDATA[
         t::Class* cls = this->classes.get(((t::String*)argv[0])->value);
         t::Class::assert(cls);
         t::Object::pick(cls);

         t::Object* return_type = this->classes.get(((t::String*)argv[2])->value);
         t::Class::assert(return_type);
         t::Object::pick(return_type);

         t::Block* block = this->get_block(((t::String*)argv[3])->value);
         //SVM_ASSERT_NOT_NULL(block);

         t::UserFunction* func = new t::UserFunction();
         t::Object::pick(func);
         func->name = ((t::String*)argv[1])->value;
         func->set_return_type(return_type);
         func->set_block(block);

         if (opc->argc > 4 && opc->argc % 2 == 0)
         {
            t::Object** func_args = new t::Object*[opc->argc - 4];
            for (ULong i = 4, j = 0 ; i < opc->argc ; i += 2, ++j)
            {
               t::String::assert(argv[i]);
               // SVM_ASSERT_NOT_NULL(argv[i + 1]);

               t::Object* arg_cls = (t::Object*)this->classes.get(((t::String*)argv[i + 1])->value);

               t::Class::assert(arg_cls);
               t::Object::pick_safe(arg_cls);
               func_args[j] = t::Variable::build(arg_cls, ((t::String*)argv[i])->value);
               t::Object::pick(func_args[j]);
               t::Object::drop_safe(arg_cls);

               t::Variable::assert(func_args[j]);
            }
            func->set_arguments((opc->argc - 4) / 2, func_args);
         }
         t::Function::assert(func);
         this->classes.declare_method(cls, func);
         t::Object::drop(cls);
         t::Object::drop(return_type);
         t::Object::drop(func);
      ]]></body>
   </opcode>

   <opcode name="list_methods__s" char="l">
      <parameters count="1">
         <parameter index="0" type="t::tSTRING" comment="Class name" />
      </parameters>
      <body>
         #ifdef _DEBUG_
         block->heap.pop(2);
         long class_index = this->classes.find(((t::String*)argv[0])->value);
         if (class_index != -1)
         {
         //this->classes.items[class_index]->functions.list();
         }
         else
         {
            // @TODO : Throw exception instead.
            WARNING("Class not found.\n");
         }
         #endif
      </body>
   </opcode>

   <opcode name="new_field__sss" char=">">
      <parameters count="3">
         <parameter index="0" type="t::tSTRING" comment="Class name" />
         <parameter index="1" type="t::tSTRING" comment="Field name" />
         <parameter index="2" type="t::tSTRING" comment="Field type" />
      </parameters>
      <body>
         long class_index = this->classes.find((t::String*)argv[0])->value);
         if (class_index != -1)
         {
            long type_index = this->classes.find(((t::String*)argv[2])->value);
            if (type_index != -1)
            {
               t::Variable* var = new t::Variable();
               var->name = ((t::String*)argv[1])->value;
               var->set_object_type((t::Object*)this->classes.items[type_index]->cls);
               this->classes.items[class_index]->fields.append(var);
            }
            else
            {
               // @TODO : Generat exception instead
               WARNING("Type not found.\n");
            }
         }
         else
         {
            // @TODO : Generat exception instead
            WARNING("Class not found.\n");
         }
      </body>
   </opcode>

</namespace>

