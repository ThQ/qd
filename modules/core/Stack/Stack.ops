<?xml version="1.0" encoding="utf-8" ?>

<namespace name="stack" full-name="core.stack" char="S">
   <include src="svm/Int.h" />
   <include src="types.h" />

   <opcode name="duplicate" char="d">
      <description>Puts a reference of the last element in the stack ontop the stack.</description>
      <parameters count="0" />
      <body>
         svm::Object* obj = heap.get(0);
         heap.append(obj);
      </body>
   </opcode>

   <opcode name="push_" char="+">
      <description>Pushes n elements on top of the stack.</description>
      <parameters minimum-count="1" />
      <body>
         heap.append(opc->argc, argv);
      </body>
   </opcode>

   <opcode name="push__o" char="#">
      <description>Push an element on top of the stack.</description>
      <parameters count="1">
         <parameter index="0" name="element_to_push" />
      </parameters>
      <body>
         heap.append(argv[0]);
      </body>
   </opcode>

   <opcode name="pop" char="-">
      <description>Pops one element off the stack.</description>
      <parameters count="0" />
      <body>
         heap.pop(1);
      </body>
   </opcode>

   <opcode name="pop2" char="\">
      <description>Pops two elements off the stack.</description>
      <parameters count="0" />
      <body>
         heap.pop(2);
      </body>
   </opcode>

   <opcode name="print" char="p">
      <description>Prints the stack content.</description>
      <parameters count="0" />
      <body><![CDATA[
         printf("Stack\n");
         for(ULong i = 0 ; i < heap.item_count ; ++ i)
         {
            Object* obj = heap.items[i];
            printf("    > $%lu @%lu\n", (heap.item_count - i - 1), (ULong)obj);
            printf("      type: %s\n", ((svm::Class*)obj->cls)->name.c_str());
            printf("      references: %d\n", obj->references);
            // [references=%d]", (heap.item_count - i - 1), ((svm::Class*)obj->cls)->name.c_str(), (ULong)obj, obj->references);
            if (obj->cls == svm::string_type)
            {
               printf("      value: \"%s\"\n", ((svm::String*)obj)->value.c_str());
            }
            else if (obj->cls == svm::int_type)
            {
               printf("      value: %ld\n", ((svm::Int*)obj)->value);
            }
            else if (obj->cls == svm::bool_type)
            {
               if (obj == svm::True)
               {
                  printf("      value: True\n");
               }
               else
               {
                  printf("      value: False\n");
               }
            }
         }
      ]]></body>
   </opcode>

   <opcode name="reverse_i" char="r">
      <description>Reverses the last n elements of the stack.</description>
      <parameters count="1">
         <parameter index="0" type="svm::int_type" />
      </parameters>
      <body>
         heap.reverse(((svm::Int*)opc->argv[0])->value);
      </body>
   </opcode>

   <opcode name="swap" char="s">
      <description>Swaps the last two elements of the stack.</description>
      <parameters count="0" />
      <body>
         heap.swap();
      </body>
   </opcode>
</namespace>

