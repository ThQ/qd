<?xml version="1.0" encoding="utf-8" ?>

<namespace name="o" char="o">
   <include src="t/Bool.h" />
   <include src="t/String.h" />

   <opcode name="call" char="!">
      <parameters minimum-count="1" />
      <body><![CDATA[
         t::Object* result_obj;
         ASSERT(opc->argc >= 1, "<opcode:OPC_OBJECT_CALL> must have at least one parameter. (%d given)\n", opc->argc);
            //SVM_ASSERT_NOT_NULL(argv[0]);
         result_obj = this->call_object(opc->content, opc->argc, argv);
         if (result_obj != t::gNULL)
         {
            this->current_block->heap.append(result_obj);
         }
      ]]></body>
   </opcode>

   <opcode name="call_stack" char=".">
      <body><![CDATA[
         t::Object** result_obj;
         opc->argc = 1;
         argv[0] = heap.pick_last_and_pop();
         heap.pop();
         result_obj = this->call_object((std::string)opc->content, opc->argc, argv);
         opc->argc = 0; // The cleanup below would fail otherwise
         if (result_obj != t::gNULL)
         {
            this->current_block->heap.append(result_obj);
         }
      ]]></body>
   </opcode>

   <opcode name="new__s" char="n">
      <parameters count="1">
         <parameter index="0" type="t::tSTRING" />
      </parameters>
      <body><![CDATA[
         long class_index = this->classes.find(((t::String*)argv[0])->value);
         if (class_index != -1)
         {
            t::Class* obj_cls = this->classes.items[class_index]->cls;
            t::UserObject* result_obj = new t::UserObject();
            t::Object::pick(result_obj);
            result_obj->set_class(obj_cls);
            //SVM_ASSERT_NOT_NULL(result_obj->cls);
            heap.append((t::Object*)result_obj);
            t::Object::drop(result_obj);
         }
         // Class cannot be found, throw an exception
         else
         {
            // @TODO: Throw an exception
            WARNING("Class cannot be found.");
            //SVM_THROW_CLASS_NOT_FOUND_EXCEPTION(this, ((t::Class*)argv[0]->cls));
         }
      ]]></body>
   </opcode>

   <opcode name="get_field_at" char="[">
      <parameters count="2">
         <parameter index="1" type="t::tINT" />
      </parameters>
      <body><![CDATA[
         ULong field_at = ((t::Int*)argv[1])->value;
         if (field_at >= 0 && field_at < argv[0]->field_count)
         {
            t::Object* obj = argv[0]->get_field(field_at);
            heap.append(obj);
         }
         else
         {
            // @TODO : Throw an exception
            //SVM_THROW_INDEX_OUT_OF_RANGE_EXCEPTION(this, field_at, argv[0]->field_count);
         }
      ]]></body>
   </opcode>

   <opcode name="set_field_at" char="]">
      <parameters count="3">
         <parameter index="1" type="t::tINT" />
      </parameters>
      <body>
         if (argv[0] == t::gFALSE)
         {
            this->run_block(this->get_block(((t::String*)argv[1])->value), true);
         }
      </body>
   </opcode>

   <opcode name="print" char="p">
      <parameters count="1" />
      <body>
         t::Object::print(argv[0]);
      </body>
   </opcode>

   <opcode name="print_line" char="P">
      <parameters count="1" />
      <body>
         t::Object::print_line(argv[0]);
      </body>
   </opcode>
</namespace>

