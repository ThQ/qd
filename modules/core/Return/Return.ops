<?xml version="1.0" encoding="utf-8" ?>

<namespace name="return" full-name="core.return" char="&lt;">
   <include src="t/Bool.h" />

   <opcode name="if" char="i">
      <parameters count="1">
         <parameter index="0" type="svm::int_type" />
      </parameters>
      <body>
         SVM_ASSERT_BOOL(argv[0]);
         if (argv[0] == t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
      </body>
   </opcode>

   <opcode name="s_if" char="I">
      <parameters count="0" />
      <body>
         t::Object* b = this->current_block->heap.get(0);
         t::Bool::assert(b);
         if (b == t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
         this->current_block->heap.pop();
      </body>
   </opcode>

   <opcode name="return" char="&lt;">
      <parameters count="0" />
      <body>
         opc->next_opcode = NULL;
      </body>
   </opcode>

   <opcode name="unless" char="u">
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         SVM_ASSERT_BOOL(argv[0]);
         if (argv[0] != t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
      </body>
   </opcode>

   <opcode name="s_unless" char="U">
      <parameters count="0" />
      <body>
         t::Object* b = this->current_block->heap.get(0);
         t::Bool::assert(b);
         if (b == t::gFALSE)
         {
            opc->next_opcode = NULL;
         }
         this->current_block->heap.pop();
      </body>
   </opcode>
</namespace>

