<?xml version="1.0" encoding="utf-8" ?>

<namespace name="return" full-name="vm.return" char="&lt;">
   <include src="t/Bool.h" />

   <opcode name="if__b" char="i">
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         if (argv[0] == t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
      </body>
   </opcode>

   <opcode name="if" char="I">
      <parameters count="0" />
      <heap>
         <object index="0" type="t::tBOOL" />
      </heap>
      <body>
         t::Object* b = heap.get(0);
         t::Bool::assert(b);
         if (b == t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
         heap.pop();
      </body>
   </opcode>

   <opcode name="return" char="&lt;">
      <parameters count="0" />
      <body>
         opc->next_opcode = NULL;
      </body>
   </opcode>

   <opcode name="unless__b" char="u">
      <parameters count="1">
         <parameter index="0" type="t::tBOOL" />
      </parameters>
      <body>
         if (argv[0] != t::gTRUE)
         {
            opc->next_opcode = NULL;
         }
      </body>
   </opcode>

   <opcode name="unless" char="U">
      <parameters count="0" />
      <heap>
         <object index="0" type="t::tBOOL" />
      </heap>
      <body>
         t::Object* b = heap.get(0);
         if (b == t::gFALSE)
         {
            opc->next_opcode = NULL;
         }
         heap.pop();
      </body>
   </opcode>
</namespace>

