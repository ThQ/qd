{% autoescape off %}#ifndef MODULES{% for ns in module.namespaces %}_{{ ns|upper }}{% endfor %}_H
#define MODULES{% for ns in module.namespaces %}_{{ ns|upper }}{% endfor %}_H

#include "t/Class.h"
#include "t/CoreFunction.h"
#include "vm/Engine.h"

{% for include in module.includes %}#include "{{ include }}"
{% endfor %}

namespace modules
{
   {% for ns in module.namespaces %}{% if not forloop.last %}
   namespace {{ ns }} {
   {% else %}
   class {{ ns }} {
   {% endif%}{% endfor %}
      {% for type in module.types %}
      {% for method in type.methods %}
      public: static t::Object* {{ method.name }}(vm::Engine* engine, t::Object* self, int argc, t::Object** argv)
      {
         {{ method.body }}
         return result;
      }
      {% endfor %}
      {% endfor %}

      public: static void declare_methods (vm::Engine& engine)
      {
         {% for type in module.types %}
         // [{{ forloop.counter}}/{{ module.types|length }}] {{ type.vm_name }}
         {% for method in type.methods %}

            // ({{ forloop.counter }}/{{ type.methods|length}}) {{type.vm_name}}.{{ method.vm_name }} ({{ method.signature }})
               INTERNAL("<t::Function|{{type.vm_name}}.{{method.vm_name}}({{method.signature}}) : declaring...");
               ASSERT({{ method.return_type }} != NULL, "{{ method.return_type }} must NOT be NULL.");

         {% for parameter in method.parameters %}
               ASSERT({{ parameter.1}} != NULL, "{{ parameter.1}} must NOT be NULL.");
               t::Object* f__{{ method.vm_name }}_param{{ forloop.counter0 }} = t::Variable::build({{parameter.1}}, "{{ parameter.0 }}");
               ASSERT(f__{{ method.vm_name }}_param{{ forloop.counter0 }} != NULL, "f__{{ method.vm_name }}_param{{ forloop.counter0 }} must NOT be NULL.");
               t::Variable::assert(f__{{ method.vm_name }}_param{{ forloop.counter0 }});
               t::Object::pick (f__{{ method.vm_name }}_param{{ forloop.counter0 }});
         {% endfor %}

               t::Function* function__{{ method.vm_name }} = (t::Function*)t::CoreFunction::build("{{ method.vm_name }}", (long int){{ method.vm_name }}, {{ method.return_type }});
               ASSERT(function__{{ method.vm_name}} != NULL, "function__{{ method.vm_name}} must NOT be NULL.");
               t::Function::assert(function__{{ method.vm_name }});
               t::Object::pick(function__{{ method.vm_name }});
               {% if method.has_parameters %}
               function__{{ method.vm_name}}->set_arguments({{ method.parameters|length}}, {% for param in method.parameters %}{% if not forloop.first %}, {%endif%}f__{{ method.vm_name }}_param{{ forloop.counter0}}{% endfor %});
               {% endif %}
               engine.classes.declare_method({{ type.object }}, (t::Object*)function__{{ method.vm_name}});
               t::Object::drop(function__{{ method.vm_name }});
               INTERNAL_APD(" OK\n");
         {% endfor %}
         {% endfor %}
      }

      public: static void finalize()
      {
         {% for type in module.types %}
         ASSERT({{ type.object }} == NULL, "modules.{{ module.name }}.finalize() : {{type.object}} must be NULL.");
         {% endfor %}
      }

      public: static void initialize(vm::Engine& engine)
      {
         {% for type in module.types %}
         {% if type.parent_object %}
         INTERNAL("{{ type.object }} ({{ type.vm_name }}) < {{ type.parent_object }} : declaring...");
         {{ type.object }} = engine.classes.declare_class("{{ type.vm_name }}", {{ type.parent_object }});
         {% else %}
         {{ type.object }} = engine.classes.declare_class("{{ type.vm_name }}");
         {% endif %}
         t::Class::assert({{ type.object }});
         t::Object::pick({{ type.object }});
         INTERNAL_APD(" OK\n");
         {% endfor %}
      }

      public: static void tear_down(vm::Engine& engine)
      {
         {% for type in module.types %}
         t::Object::drop({{type.object}});
         {% endfor %}
      }
   {% for ns in module.namespaces %}{% if forloop.first %}
   };
   {% else %}
   }
   {% endif%}{% endfor %}
}

#endif{% endautoescape %}
